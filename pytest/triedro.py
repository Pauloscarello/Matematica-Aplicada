from vetores import *
valor = 3
r = ((-1*cos(a*t))*N.i) + ((-2*sin(a*t))*N.j) + ((t+3*t**2)*N.k)
# r = ((1*sin(1*t))*N.i) + ((-1*cos(1*t))*N.j) + ((-2*t)*N.k)
# r = ((0)*N.i) + ((t*sin(1*t))*N.j) + ((t**2*cos(1*t))*N.k)
# r = ((3*cos(1*t))*N.i) + ((3*sin(1*t))*N.j) + ((2*t)*N.k)
# r = ((0)*N.i) + ((t*sin(1*t))*N.j) + ((t**2*cos(t))*N.k)
# r = ((t*cos(1*t))*N.i) + ((t*sin(1*t))*N.j) + ((0)*N.k)
# r = ((1*cos(1*t))*N.i) + ((1*sin(1*t))*N.j) + ((2)*N.k)
# r = ((t)*N.i) + (((2*(E**(t-1))))*N.j) + (((t**2))*N.k)
# r = ((1*cos(1*t))*N.i) + ((1*sin(1*t))*N.j) + ((t)*N.k)
# r = ((cos(t))*N.i) + ((sin(t))*N.j) + ((cos(2*t))*N.k)
# r = ((t)*N.i) + (((1 - t**2))*N.j) + ((t**3 + 1)*N.k)
# r = ((t)*N.i) + (((t**2)/2)*N.j) + (((t**3)/3)*N.k)
# r = ((t)*N.i) + (((t**2))*N.j) + (((t**3))*N.k)
# r = ((t)*N.i) + ((a*t**2)*N.j) + ((0)*N.k)
# r = ((1)*N.i) + ((-2)*N.j) + ((1)*N.k)
rPrime = Prime(r)
# print("r': ", rPrime)
rPrimeModulo = sqrt(rPrime & rPrime)
# print("\n||r'||: ", (rPrimeModulo))
rPrimePrime = simplify(rPrime.diff(t)) 
rPrimePrimePrime = simplify(rPrimePrime.diff(t)) 
# tanVec = simplify(rPrime/(sqrt(rPrime & rPrime)))
# print("\nVetor tangente: ", tanVec)
# tanVecPrime = simplify(tanVec.diff(t))
# print("\nVetor T': ", tanVecPrime)
# normVec = simplify(tanVecPrime/(sqrt(tanVecPrime & tanVecPrime)))
# print("\nVetor normal: ", normVec)
# binormVec = simplify(tanVec ^ normVec)
# print("\nVetor binormal: ", binormVec) 
# curvatura = simplify((rPrime ^ rPrimePrime)/((sqrt(rPrime & rPrime))**3))
# print("\nCurvatura: ", norma(simplify(curvatura.subs(a, math.pi).subs(t, valor)))) 
# torcao = simplify((binormVec.diff(t) & binormVec.diff(t))/sqrt(rPrime & rPrime))
# print("\nTorção: ", torcao)
# torcaoV = simplify(torsion(r, math.pi/2))
# torcaoV = ((rPrime ^ rPrimePrime) & rPrimePrimePrime)/(sqrt((rPrime ^ rPrimePrime) & (rPrime ^ rPrimePrime)) * sqrt((rPrime ^ rPrimePrime) & (rPrime ^ rPrimePrime)))
# print("\nTorção 2: ", torcaoV.subs(a, math.pi).subs(t, valor))
# if(valor != -1):
# print("r': ", rPrime.subs(t, valor))
# print("\n||r'||: ", (rPrimeModulo.subs(t, valor)))
# print("\nVetor tangente: ", tanVec.subs(t, valor))
# print("\nVetor normal: ", normVec.subs(t, valor))
# print("\nVetor binormal: ", binormVec.subs(t, valor))
# print("\nCurvatura: ", curvatura.subs(t, valor))
# print("\nTorção: ", torcao.subs(t, valor))
accelT = (rPrime & rPrimePrime) / norma(rPrime)
print(accelT.subs(a, math.pi).subs(t, valor))
accelN = (rPrime ^ rPrimePrime) / norma(rPrime)
print(norma(accelN.subs(a, math.pi).subs(t, valor)))